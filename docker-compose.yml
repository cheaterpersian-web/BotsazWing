version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telegram-bot-saas-postgres
    environment:
      POSTGRES_DB: telegram_bot_saas
      POSTGRES_USER: telegram_bot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${HOST_POSTGRES_PORT:-15432}:5432"
    networks:
      - telegram-bot-saas
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_bot_user -d telegram_bot_saas"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-saas-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "${HOST_REDIS_PORT:-16379}:6379"
    networks:
      - telegram-bot-saas
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: telegram-bot-saas-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - telegram-bot-saas
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telegram-bot-saas-backend
    environment:
      # Database
      DATABASE_URL: postgresql://telegram_bot_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/telegram_bot_saas
      DATABASE_ECHO: "false"
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-change-this-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      
      # CORS
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:3001"
      
      # File Storage
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_BUCKET_NAME: telegram-bot-saas
      MINIO_SECURE: "false"
      
      # Telegram Bot
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL:-}
      
      # Docker
      DOCKER_HOST: unix:///var/run/docker.sock
      DOCKER_NETWORK: telegram-bot-saas
      
      # Payment Settings
      BANK_ACCOUNT_NUMBER: ${BANK_ACCOUNT_NUMBER:-1234567890}
      CRYPTO_WALLET_ADDRESS: ${CRYPTO_WALLET_ADDRESS:-1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: "100"
      RATE_LIMIT_WINDOW: "60"
      
      # Debug
      DEBUG: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - backend_logs:/app/logs
    ports:
      - "${HOST_BACKEND_PORT:-18000}:8000"
    networks:
      - telegram-bot-saas
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: telegram-bot-saas-bot
    environment:
      # Bot Configuration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL:-}
      TELEGRAM_WEBHOOK_PORT: "8080"
      
      # Backend API
      API_BASE_URL: http://backend:8000
      API_TOKEN: ${API_TOKEN:-your-api-token}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/1
      
      # Admin Configuration
      ADMIN_TELEGRAM_IDS: ${ADMIN_TELEGRAM_IDS:-}
      
      # Bot Settings
      MAX_BOTS_PER_USER: "10"
      DEPLOYMENT_TIMEOUT: "300"
      
      # Payment Settings
      BANK_ACCOUNT_NUMBER: ${BANK_ACCOUNT_NUMBER:-1234567890}
      CRYPTO_WALLET_ADDRESS: ${CRYPTO_WALLET_ADDRESS:-1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa}
      
      # Logging
      LOG_LEVEL: "INFO"
    volumes:
      - bot_logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - telegram-bot-saas
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telegram-bot-saas-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_BOT_URL: http://localhost:8080
    ports:
      - "${HOST_FRONTEND_PORT:-3000}:3000"
    networks:
      - telegram-bot-saas
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: telegram-bot-saas-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "${HOST_NGINX_HTTP_PORT:-18080}:80"
      - "${HOST_NGINX_HTTPS_PORT:-18443}:443"
    networks:
      - telegram-bot-saas
    depends_on:
      - backend
      - frontend
      - bot
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telegram-bot-saas-celery-worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql://telegram_bot_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/telegram_bot_saas
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-change-this-in-production}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      DOCKER_HOST: unix:///var/run/docker.sock
      DOCKER_NETWORK: telegram-bot-saas
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - celery_logs:/app/logs
    networks:
      - telegram-bot-saas
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telegram-bot-saas-celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql://telegram_bot_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/telegram_bot_saas
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-change-this-in-production}
    volumes:
      - celery_beat_logs:/app/logs
    networks:
      - telegram-bot-saas
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram-bot-saas-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - telegram-bot-saas
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: telegram-bot-saas-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - telegram-bot-saas
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  backend_logs:
  bot_logs:
  celery_logs:
  celery_beat_logs:
  prometheus_data:
  grafana_data:

networks:
  telegram-bot-saas:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16